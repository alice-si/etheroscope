    6  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
    7  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
    8  # This is needed  to ensure that binaries provided
    9  # by Docker Toolbox over-ride binaries provided by
   10  # Docker for Windows when launching using the Quickstart.
   11  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
   12  VM=${DOCKER_MACHINE_NAME-default}
   13  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
   14  STEP="Looking for vboxmanage.exe"
   15  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
   16  BLUE='\033[1;34m'
   17  GREEN='\033[0;32m'
   18  NC='\033[0m'
   19  #clear all_proxy if not socks address
   20  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
   21  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
   22  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
   23  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
   24  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
   25  VM_EXISTS_CODE=$?
   26  set -e
   27  STEP="Checking if machine $VM exists"
   28  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
   29  STEP="Checking status on $VM"
   30  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
   31  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
   32  STEP="Setting env"
   33  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
   34  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
   35  STEP="Finalize"
   36  clear
   37  cat << EOF
   38                          ##         .
   39                    ## ## ##        ==
   40                 ## ## ## ## ##    ===
   41             /"""""""""""""""""\___/ ===
   42        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
   43             \______ o           __/
   44               \    \         __/
   45                \____\_______/
   46  EOF
   47  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
   48  echo "For help getting started, check out the docs at https://docs.docker.com"
   49  echo
   50  echo 
   51  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
   52  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
   53  export -f docker
   54  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
   55  #!/bin/bash
   56  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
   57  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
   58  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
   59  # This is needed  to ensure that binaries provided
   60  # by Docker Toolbox over-ride binaries provided by
   61  # Docker for Windows when launching using the Quickstart.
   62  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
   63  VM=${DOCKER_MACHINE_NAME-default}
   64  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
   65  STEP="Looking for vboxmanage.exe"
   66  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
   67  BLUE='\033[1;34m'
   68  GREEN='\033[0;32m'
   69  NC='\033[0m'
   70  #clear all_proxy if not socks address
   71  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
   72  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
   73  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
   74  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
   75  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
   76  VM_EXISTS_CODE=$?
   77  set -e
   78  STEP="Checking if machine $VM exists"
   79  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
   80  STEP="Checking status on $VM"
   81  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
   82  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
   83  STEP="Setting env"
   84  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
   85  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
   86  STEP="Finalize"
   87  clear
   88  cat << EOF
   89                          ##         .
   90                    ## ## ##        ==
   91                 ## ## ## ## ##    ===
   92             /"""""""""""""""""\___/ ===
   93        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
   94             \______ o           __/
   95               \    \         __/
   96                \____\_______/
   97  EOF
   98  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
   99  echo "For help getting started, check out the docs at https://docs.docker.com"
  100  echo
  101  echo 
  102  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  103  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  104  export -f docker
  105  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  106  #!/bin/bash
  107  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
  108  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
  109  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
  110  # This is needed  to ensure that binaries provided
  111  # by Docker Toolbox over-ride binaries provided by
  112  # Docker for Windows when launching using the Quickstart.
  113  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
  114  VM=${DOCKER_MACHINE_NAME-default}
  115  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
  116  STEP="Looking for vboxmanage.exe"
  117  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
  118  BLUE='\033[1;34m'
  119  GREEN='\033[0;32m'
  120  NC='\033[0m'
  121  #clear all_proxy if not socks address
  122  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
  123  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
  124  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  125  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  126  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
  127  VM_EXISTS_CODE=$?
  128  set -e
  129  STEP="Checking if machine $VM exists"
  130  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
  131  STEP="Checking status on $VM"
  132  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
  133  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
  134  STEP="Setting env"
  135  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
  136  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
  137  STEP="Finalize"
  138  clear
  139  cat << EOF
  140                          ##         .
  141                    ## ## ##        ==
  142                 ## ## ## ## ##    ===
  143             /"""""""""""""""""\___/ ===
  144        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
  145             \______ o           __/
  146               \    \         __/
  147                \____\_______/
  148  EOF
  149  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
  150  echo "For help getting started, check out the docs at https://docs.docker.com"
  151  echo
  152  echo 
  153  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  154  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  155  export -f docker
  156  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  157  #!/bin/bash
  158  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
  159  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
  160  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
  161  # This is needed  to ensure that binaries provided
  162  # by Docker Toolbox over-ride binaries provided by
  163  # Docker for Windows when launching using the Quickstart.
  164  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
  165  VM=${DOCKER_MACHINE_NAME-default}
  166  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
  167  STEP="Looking for vboxmanage.exe"
  168  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
  169  BLUE='\033[1;34m'
  170  GREEN='\033[0;32m'
  171  NC='\033[0m'
  172  #clear all_proxy if not socks address
  173  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
  174  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
  175  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  176  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  177  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
  178  VM_EXISTS_CODE=$?
  179  set -e
  180  STEP="Checking if machine $VM exists"
  181  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
  182  STEP="Checking status on $VM"
  183  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
  184  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
  185  STEP="Setting env"
  186  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
  187  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
  188  STEP="Finalize"
  189  clear
  190  cat << EOF
  191                          ##         .
  192                    ## ## ##        ==
  193                 ## ## ## ## ##    ===
  194             /"""""""""""""""""\___/ ===
  195        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
  196             \______ o           __/
  197               \    \         __/
  198                \____\_______/
  199  EOF
  200  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
  201  echo "For help getting started, check out the docs at https://docs.docker.com"
  202  echo
  203  echo 
  204  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  205  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  206  export -f docker
  207  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  208  #!/bin/bash
  209  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
  210  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
  211  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
  212  # This is needed  to ensure that binaries provided
  213  # by Docker Toolbox over-ride binaries provided by
  214  # Docker for Windows when launching using the Quickstart.
  215  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
  216  VM=${DOCKER_MACHINE_NAME-default}
  217  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
  218  STEP="Looking for vboxmanage.exe"
  219  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
  220  BLUE='\033[1;34m'
  221  GREEN='\033[0;32m'
  222  NC='\033[0m'
  223  #clear all_proxy if not socks address
  224  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
  225  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
  226  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  227  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  228  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
  229  VM_EXISTS_CODE=$?
  230  set -e
  231  STEP="Checking if machine $VM exists"
  232  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
  233  STEP="Checking status on $VM"
  234  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
  235  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
  236  STEP="Setting env"
  237  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
  238  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
  239  STEP="Finalize"
  240  clear
  241  cat << EOF
  242                          ##         .
  243                    ## ## ##        ==
  244                 ## ## ## ## ##    ===
  245             /"""""""""""""""""\___/ ===
  246        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
  247             \______ o           __/
  248               \    \         __/
  249                \____\_______/
  250  EOF
  251  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
  252  echo "For help getting started, check out the docs at https://docs.docker.com"
  253  echo
  254  echo 
  255  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  256  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  257  export -f docker
  258  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  259  #!/bin/bash
  260  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
  261  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
  262  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
  263  # This is needed  to ensure that binaries provided
  264  # by Docker Toolbox over-ride binaries provided by
  265  # Docker for Windows when launching using the Quickstart.
  266  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
  267  VM=${DOCKER_MACHINE_NAME-default}
  268  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
  269  STEP="Looking for vboxmanage.exe"
  270  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
  271  BLUE='\033[1;34m'
  272  GREEN='\033[0;32m'
  273  NC='\033[0m'
  274  #clear all_proxy if not socks address
  275  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
  276  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
  277  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  278  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  279  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
  280  VM_EXISTS_CODE=$?
  281  set -e
  282  STEP="Checking if machine $VM exists"
  283  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
  284  STEP="Checking status on $VM"
  285  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
  286  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
  287  STEP="Setting env"
  288  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
  289  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
  290  STEP="Finalize"
  291  clear
  292  cat << EOF
  293                          ##         .
  294                    ## ## ##        ==
  295                 ## ## ## ## ##    ===
  296             /"""""""""""""""""\___/ ===
  297        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
  298             \______ o           __/
  299               \    \         __/
  300                \____\_______/
  301  EOF
  302  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
  303  echo "For help getting started, check out the docs at https://docs.docker.com"
  304  echo
  305  echo 
  306  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  307  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  308  export -f docker
  309  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  310  #!/bin/bash
  311  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
  312  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
  313  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
  314  # This is needed  to ensure that binaries provided
  315  # by Docker Toolbox over-ride binaries provided by
  316  # Docker for Windows when launching using the Quickstart.
  317  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
  318  VM=${DOCKER_MACHINE_NAME-default}
  319  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
  320  STEP="Looking for vboxmanage.exe"
  321  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
  322  BLUE='\033[1;34m'
  323  GREEN='\033[0;32m'
  324  NC='\033[0m'
  325  #clear all_proxy if not socks address
  326  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
  327  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
  328  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  329  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  330  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
  331  VM_EXISTS_CODE=$?
  332  set -e
  333  STEP="Checking if machine $VM exists"
  334  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
  335  STEP="Checking status on $VM"
  336  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
  337  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
  338  STEP="Setting env"
  339  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
  340  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
  341  STEP="Finalize"
  342  clear
  343  cat << EOF
  344                          ##         .
  345                    ## ## ##        ==
  346                 ## ## ## ## ##    ===
  347             /"""""""""""""""""\___/ ===
  348        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
  349             \______ o           __/
  350               \    \         __/
  351                \____\_______/
  352  EOF
  353  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
  354  echo "For help getting started, check out the docs at https://docs.docker.com"
  355  echo
  356  echo 
  357  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  358  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  359  export -f docker
  360  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  361  #!/bin/bash
  362  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
  363  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
  364  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
  365  # This is needed  to ensure that binaries provided
  366  # by Docker Toolbox over-ride binaries provided by
  367  # Docker for Windows when launching using the Quickstart.
  368  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
  369  VM=${DOCKER_MACHINE_NAME-default}
  370  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
  371  STEP="Looking for vboxmanage.exe"
  372  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
  373  BLUE='\033[1;34m'
  374  GREEN='\033[0;32m'
  375  NC='\033[0m'
  376  #clear all_proxy if not socks address
  377  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
  378  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
  379  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  380  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  381  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
  382  VM_EXISTS_CODE=$?
  383  set -e
  384  STEP="Checking if machine $VM exists"
  385  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
  386  STEP="Checking status on $VM"
  387  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
  388  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
  389  STEP="Setting env"
  390  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
  391  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
  392  STEP="Finalize"
  393  clear
  394  cat << EOF
  395                          ##         .
  396                    ## ## ##        ==
  397                 ## ## ## ## ##    ===
  398             /"""""""""""""""""\___/ ===
  399        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
  400             \______ o           __/
  401               \    \         __/
  402                \____\_______/
  403  EOF
  404  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
  405  echo "For help getting started, check out the docs at https://docs.docker.com"
  406  echo
  407  echo 
  408  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  409  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  410  export -f docker
  411  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  412  docker ps
  413  docker ps -a
  414  #!/bin/bash
  415  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
  416  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
  417  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
  418  # This is needed  to ensure that binaries provided
  419  # by Docker Toolbox over-ride binaries provided by
  420  # Docker for Windows when launching using the Quickstart.
  421  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
  422  VM=${DOCKER_MACHINE_NAME-default}
  423  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
  424  STEP="Looking for vboxmanage.exe"
  425  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
  426  BLUE='\033[1;34m'
  427  GREEN='\033[0;32m'
  428  NC='\033[0m'
  429  #clear all_proxy if not socks address
  430  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
  431  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
  432  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  433  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  434  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
  435  VM_EXISTS_CODE=$?
  436  set -e
  437  STEP="Checking if machine $VM exists"
  438  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
  439  STEP="Checking status on $VM"
  440  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
  441  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
  442  STEP="Setting env"
  443  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
  444  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
  445  STEP="Finalize"
  446  clear
  447  cat << EOF
  448                          ##         .
  449                    ## ## ##        ==
  450                 ## ## ## ## ##    ===
  451             /"""""""""""""""""\___/ ===
  452        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
  453             \______ o           __/
  454               \    \         __/
  455                \____\_______/
  456  EOF
  457  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
  458  echo "For help getting started, check out the docs at https://docs.docker.com"
  459  echo
  460  echo 
  461  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  462  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  463  export -f docker
  464  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  465  docker run -it -p 8090:8090  etheroscope
  466  netstat -a -b
  467  docekr ps
  468  docker ps
  469  docker stop d6fe8ac0042f
  470  docker rm d6fe8ac0042f
  471  docker ps -a
  472  docker rm db69ec21a80f
  473  docker ps -a
  474  docker rm beef51bd0076
  475  docekr rm 680961940ec2
  476  docker rm 680961940ec2
  477  docker rm 680961940ec2
  478  docker ps =a
  479  docker ps =-a
  480  docker ps -a
  481  docker rm 296d708bf812
  482  docker ps
  483  docker run -p 8090:8090 etheroscope
  484  cd
  485  cd etheroscope/
  486  docker build -t etheroscope .
  487  docekr ps
  488  docker ps
  489  docker stop
  490  docker stop 99b1c5919690
  491  docker rm 99b1c5919690
  492  docker run -p 8090:8090 etheroscope
  493  docker tag etheroscope gcr.io/etheroscope/etheroscope-frontend
  494  docker images
  495  docker push  gcr.io/etheroscope/etheroscope-frontend
  496  gcloud auth configure-docker
  497  gcloud auth configure-docker
  498  docker push  gcr.io/etheroscope/etheroscope-frontend
  499  doskey /history
  500  history
  501  ls -la
  502  history | grep -i searchterm
  503  man history
  504  ls
  505  history > commandsHistoryBuildingDocker.txt
